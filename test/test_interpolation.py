import sys
from unittest import TestCase

import geocat.datafiles as gdf
import numpy as np
import numpy.testing as nt
import xarray as xr

# Import from directory structure if coverage test, or from installed
# packages otherwise
if "--cov" in str(sys.argv):
    from src.geocat.comp import interp_hybrid_to_pressure, interp_sigma_to_hybrid
else:
    from geocat.comp import interp_hybrid_to_pressure, interp_sigma_to_hybrid

# Global input data

# Open the netCDF data file "atmos.nc" and read in common variables
try:
    ds_atmos = xr.open_dataset(gdf.get("netcdf_files/atmos.nc"),
                               decode_times=False)
except:
    ds_atmos = xr.open_dataset("test/atmos.nc", decode_times=False)

_hyam = ds_atmos.hyam
_hybm = ds_atmos.hybm
_p0 = 1000. * 100  # Pa


class Test_interp_hybrid_to_pressure(TestCase):

    # Sample input data
    data = ds_atmos.U[0, :, :, :]
    ps = ds_atmos.PS
    pres3d = np.asarray([1000, 950, 800, 700, 600, 500, 400, 300, 200])  # mb
    pres3d = pres3d * 100  # mb to Pa

    # Expected output from above sample input

    try:
        ds_out = xr.open_dataset(
            "vinth2p_output.nc"
        )  # Generated by running ncl_tests/vinth2p_test_conwomap_5.ncl on atmos.nc
    except:
        ds_out = xr.open_dataset("test/vinth2p_output.nc")

    uzon_expected = ds_out.uzon  # Expected output
    u_int_expected = ds_out.u_int  # Expected output

    def test_interp_hybrid_to_pressure_atmos(self):
        u_int = interp_hybrid_to_pressure(self.data,
                                          self.ps[0, :, :],
                                          _hyam,
                                          _hybm,
                                          p0=_p0,
                                          new_levels=self.pres3d,
                                          method="log")

        uzon = u_int.mean(dim='lon')

        nt.assert_array_almost_equal(self.uzon_expected, uzon, 5)

    def test_interp_hybrid_to_pressure_atmos_4d(self):
        data_t = self.data.expand_dims("time")

        u_int = interp_hybrid_to_pressure(data_t,
                                          self.ps,
                                          _hyam,
                                          _hybm,
                                          p0=_p0,
                                          new_levels=self.pres3d,
                                          method="log")

        uzon = u_int.mean(dim='lon')

        uzon_expected_t = self.uzon_expected.expand_dims("time")
        nt.assert_array_almost_equal(uzon_expected_t, uzon, 5)

    def test_interp_hybrid_to_pressure_atmos_wrong_method(self):
        with nt.assert_raises(ValueError):
            u_int = interp_hybrid_to_pressure(self.data,
                                              self.ps[0, :, :],
                                              _hyam,
                                              _hybm,
                                              p0=_p0,
                                              new_levels=self.pres3d,
                                              method="wrong_method")

    def test_interp_hybrid_to_pressure_atmos_dask(self):

        ps_dask = self.ps.chunk()
        data_dask = self.data.chunk()

        u_int = interp_hybrid_to_pressure(data_dask,
                                          ps_dask[0, :, :],
                                          _hyam,
                                          _hybm,
                                          p0=_p0,
                                          new_levels=self.pres3d,
                                          method="log")

        uzon = u_int.mean(dim='lon')

        nt.assert_array_almost_equal(self.uzon_expected, uzon, 5)


class Test_interp_sigma_to_hybrid(TestCase):

    hyam = xr.DataArray([0.0108093, 0.0130731, 0.03255911, 0.0639471])
    hybm = xr.DataArray([0.0108093, 0.0173664, 0.06069280, 0.1158237])

    # Open the netCDF data file "u.89335.1.nc" and read in input data
    try:
        ds_u = xr.open_dataset(
            gdf.get("netcdf_files/u.89335.1_subset_time361.nc"),
            decode_times=False)
    except:
        ds_u = xr.open_dataset("test/u.89335.1_subset_time361.nc",
                               decode_times=False)

    u = ds_u.u[:, 0:3, 0:2]

    # Open the netCDF data file "ps.89335.1.nc" and read in additional input data
    try:
        ds_ps = xr.open_dataset(gdf.get("netcdf_files/ps.89335.1.nc"),
                                decode_times=False)
    except:
        ds_ps = xr.open_dataset("test/ps.89335.1.nc", decode_times=False)

    ps = ds_ps.ps[361, 0:3, 0:2] * 100  # Pa
    sigma = ds_ps.sigma

    # Expected output from above sample input
    try:
        ds_out = xr.open_dataset(
            "sigma2hybrid_output.nc"
        )  # Generated by running ncl_tests/test_sigma2hybrid.ncl
    except:
        ds_out = xr.open_dataset("test/sigma2hybrid_output.nc")

    xh_expected = ds_out.xh.transpose("ncl3", "ncl1", "ncl2")  # Expected output

    def test_interp_sigma_to_hybrid_1d(self):
        xh = interp_sigma_to_hybrid(self.u[:, 0, 0],
                                    self.sigma,
                                    self.ps[0, 0],
                                    self.hyam,
                                    self.hybm,
                                    p0=_p0,
                                    method="linear")
        nt.assert_array_almost_equal(self.xh_expected[:, 0, 0], xh, 5)

    def test_interp_sigma_to_hybrid_3d(self):
        xh = interp_sigma_to_hybrid(self.u,
                                    self.sigma,
                                    self.ps,
                                    self.hyam,
                                    self.hybm,
                                    p0=_p0,
                                    method="linear")
        nt.assert_array_almost_equal(self.xh_expected, xh, 5)

    def test_interp_sigma_to_hybrid_3d_transposed(self):
        xh = interp_sigma_to_hybrid(self.u.transpose('ycoord', 'sigma',
                                                     'xcoord'),
                                    self.sigma,
                                    self.ps.transpose('ycoord', 'xcoord'),
                                    self.hyam,
                                    self.hybm,
                                    p0=_p0,
                                    method="linear")
        nt.assert_array_almost_equal(
            self.xh_expected.transpose('ncl2', 'ncl3', 'ncl1'), xh, 5)

    def test_interp_sigma_to_hybrid_3d_dask(self):

        ps_dask = self.ps.chunk()
        u_dask = self.u.chunk()

        xh = interp_sigma_to_hybrid(u_dask,
                                    self.sigma,
                                    ps_dask,
                                    self.hyam,
                                    self.hybm,
                                    p0=_p0,
                                    method="linear")
        nt.assert_array_almost_equal(self.xh_expected, xh, 5)

    def test_interp_sigma_to_hybrid_wrong_method(self):
        with nt.assert_raises(ValueError):
            xh = interp_sigma_to_hybrid(self.u,
                                        self.sigma,
                                        self.ps,
                                        self.hyam,
                                        self.hybm,
                                        p0=_p0,
                                        method="wrong_method")
