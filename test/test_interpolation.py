import sys
from unittest import TestCase

import geocat.datafiles as gdf
import numpy as np
import numpy.testing as nt
import xarray as xr

# Import from directory structure if coverage test, or from installed
# packages otherwise
if "--cov" in str(sys.argv):
    from src.geocat.comp import interp_hybrid_to_pressure
else:
    from geocat.comp import interp_hybrid_to_pressure

# Sample input data

# Open a netCDF data file
# "atmos.nc" and below test is the one that is almost fully done iin NCL's conwomap_5 example
ds = xr.open_dataset(gdf.get("netcdf_files/atmos.nc"), decode_times=False)

_data = ds.U[0, :, :, :]
_hyam = ds.hyam
_hybm = ds.hybm
_ps = ds.PS
_p0 = 1000. * 100  # Pa
_pres3d = np.asarray([1000, 950, 800, 700, 600, 500, 400, 300, 200])  # mb
_pres3d = _pres3d * 100  # mb to Pa

# Expected output from above sample input

try:
    ds_out = xr.open_dataset(
        "vinth2p_output.nc"
    )  # Generated by running ncl_tests/vinth2p_test_conwomap_5.ncl on atmos.nc
except:
    ds_out = xr.open_dataset("test/vinth2p_output.nc")

_uzon_expected = ds_out.uzon  # Expected output
_u_int_expected = ds_out.u_int  # Expected output


class Test_interp_hybrid_to_pressure(TestCase):

    def test_interp_hybrid_to_pressure_atmos(self):
        u_int = interp_hybrid_to_pressure(_data,
                                          _ps[0, :, :],
                                          _hyam,
                                          _hybm,
                                          p0=_p0,
                                          new_levels=_pres3d,
                                          method="log")

        uzon = u_int.mean(dim='lon')

        nt.assert_array_almost_equal(_uzon_expected, uzon, 5)

    def test_interp_hybrid_to_pressure_atmos_4d(self):
        data_t = _data.expand_dims("time")

        u_int = interp_hybrid_to_pressure(data_t,
                                          _ps,
                                          _hyam,
                                          _hybm,
                                          p0=_p0,
                                          new_levels=_pres3d,
                                          method="log")

        uzon = u_int.mean(dim='lon')

        uzon_expected_t = _uzon_expected.expand_dims("time")
        nt.assert_array_almost_equal(uzon_expected_t, uzon, 5)

    def test_interp_hybrid_to_pressure_atmos_wrong_method(self):
        with nt.assert_raises(ValueError):
            u_int = interp_hybrid_to_pressure(_data,
                                              _ps[0, :, :],
                                              _hyam,
                                              _hybm,
                                              p0=_p0,
                                              new_levels=_pres3d,
                                              method="wrong_method")

    def test_interp_hybrid_to_pressure_atmos_dask(self):

        ps_dask = _ps.chunk()
        data_dask = _data.chunk()

        u_int = interp_hybrid_to_pressure(data_dask,
                                          ps_dask[0, :, :],
                                          _hyam,
                                          _hybm,
                                          p0=_p0,
                                          new_levels=_pres3d,
                                          method="log")

        uzon = u_int.mean(dim='lon')

        nt.assert_array_almost_equal(_uzon_expected, uzon, 5)
