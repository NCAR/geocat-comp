import unittest

import dask.array as da
import dask.distributed as dd
import numpy as np
import xarray as xr

from geocat.comp.crop import max_daylight


class Test_max_daylight(unittest.TestCase):

    @classmethod
    def setUpClass(self):
        # get ground truth from ncl run netcdf file
        try:
            ncl_xr_gt = xr.open_dataarray(
                "max_daylight_test.nc"
            )    # Generated by running ncl_tests/test_max_daylight.ncl
        except:
            ncl_xr_gt = xr.open_dataarray("test/max_daylight_test.nc")

        self.ncl_gt = np.asarray(ncl_xr_gt)

        self.jday_gt = np.linspace(1, 365, num=365)
        self.lat_gt = np.linspace(-66, 66, num=133)

        if __name__ == 'test_max_daylight':
            cluster = dd.LocalCluster(n_workers=2, threads_per_worker=2)
            print(cluster.dashboard_link)
            self.client = dd.Client(cluster)

    @classmethod
    def tearDownClass(self):
        self.client.close()

    def test_numpy_input(self):
        assert np.allclose(max_daylight(self.jday_gt, self.lat_gt),
                           self.ncl_gt,
                           atol=0.005)

    def test_float_input(self):
        assert np.allclose(max_daylight(246, -20.0), 11.66559, atol=0.005)

    def test_list_input(self):
        assert np.allclose(max_daylight(self.jday_gt.tolist(),
                                        self.lat_gt.tolist()),
                           self.ncl_gt,
                           atol=0.005)

    def test_xarray_input(self):
        jday = xr.DataArray(self.jday_gt)
        lat = xr.DataArray(self.lat_gt)

        assert np.allclose(max_daylight(jday, lat), self.ncl_gt, atol=0.005)

    def test_dask_unchunked_input(self):
        jday = da.from_array(self.jday_gt)
        lat = da.from_array(self.lat_gt)

        out = self.client.submit(max_daylight, jday, lat).result()

        assert np.allclose(out, self.ncl_gt, atol=0.005)

    def test_dask_chunked_input(self):
        jday = da.from_array(self.jday_gt, chunks='auto')
        lat = da.from_array(self.lat_gt, chunks='auto')

        out = self.client.submit(max_daylight, jday, lat).result()

        assert np.allclose(out, self.ncl_gt, atol=0.005)
