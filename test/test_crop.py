import sys
import unittest

import dask.array as da
import dask.distributed as dd
import numpy as np
import xarray as xr

# Import from directory structure if coverage test, or from installed
# packages otherwise
if "--cov" in str(sys.argv):
    from src.geocat.comp import (actual_saturation_vapor_pressure, max_daylight,
                                 psychrometric_constant,
                                 saturation_vapor_pressure,
                                 saturation_vapor_pressure_slope)
else:
    from geocat.comp import (actual_saturation_vapor_pressure, max_daylight,
                             psychrometric_constant, saturation_vapor_pressure,
                             saturation_vapor_pressure_slope)


class Test_actual_saturation_vapor_pressure(unittest.TestCase):

    @classmethod
    def setUpClass(cls):

        # get ground truth from ncl run netcdf file
        try:
            ncl_xr_gt = xr.open_dataarray(
                "satvpr_tdew_fao56_output.nc"
            )  # Generated by running ncl_tests/test_satvpr_tdew_fao56.ncl
        except:
            ncl_xr_gt = xr.open_dataarray("test/satvpr_tdew_fao56_output.nc")

        # set up ground truths
        cls.ncl_gt = np.asarray(ncl_xr_gt)

        cls.temp_gt = np.arange(1, 101, 1)

        # make client to reference in subsequent tests
        cls.client = dd.Client()

    def test_numpy_input(self):
        assert np.allclose(actual_saturation_vapor_pressure(
            self.temp_gt, tfill=1.0000000e+20),
                           self.ncl_gt,
                           atol=0.005)

    def test_float_input(self):
        degf = 59
        expected = 1.70535
        assert np.allclose(actual_saturation_vapor_pressure(degf),
                           expected,
                           atol=0.005)

    def test_list_input(self):
        assert np.allclose(actual_saturation_vapor_pressure(
            self.temp_gt.tolist(), tfill=1.0000000e+20),
                           self.ncl_gt.tolist(),
                           atol=0.005)

    def test_multi_dimensional_input(self):
        assert np.allclose(actual_saturation_vapor_pressure(
            self.temp_gt.reshape(2, 50), tfill=1.0000000e+20),
                           self.ncl_gt.reshape(2, 50),
                           atol=0.005)

    def test_xarray_input(self):
        tempf = xr.DataArray(self.temp_gt)
        expected = xr.DataArray(self.ncl_gt)

        assert np.allclose(actual_saturation_vapor_pressure(
            tempf, tfill=1.0000000e+20),
                           expected,
                           atol=0.005)

    def test_dask_unchunked_input(self):
        tempf = da.from_array(self.temp_gt)
        out = self.client.submit(actual_saturation_vapor_pressure,
                                 tempf,
                                 tfill=1.0000000e+20).result()

        assert np.allclose(out, self.ncl_gt)

    def test_dask_chunked_input(self):
        tempf = da.from_array(self.temp_gt, chunks='auto')
        out = self.client.submit(actual_saturation_vapor_pressure,
                                 tempf,
                                 tfill=1.0000000e+20).result()

        assert np.allclose(out, self.ncl_gt)


class Test_max_daylight(unittest.TestCase):

    @classmethod
    def setUpClass(cls):

        # get ground truth from ncl run netcdf file
        try:
            ncl_xr_gt = xr.open_dataarray(
                "max_daylight_test.nc"
            )  # Generated by running ncl_tests/test_max_daylight.ncl
        except:
            ncl_xr_gt = xr.open_dataarray("test/max_daylight_test.nc")

        # set up ground truths
        cls.ncl_gt = np.asarray(ncl_xr_gt)

        cls.jday_gt = np.linspace(1, 365, num=365)
        cls.lat_gt = np.linspace(-66, 66, num=133)

        # make client to reference in subsequent tests
        cls.client = dd.Client()

    def test_numpy_input(self):
        assert np.allclose(max_daylight(self.jday_gt, self.lat_gt),
                           self.ncl_gt,
                           atol=0.005)

    def test_float_input(self):
        assert np.allclose(max_daylight(246, -20.0), 11.66559, atol=0.005)

    def test_list_input(self):
        assert np.allclose(max_daylight(self.jday_gt.tolist(),
                                        self.lat_gt.tolist()),
                           self.ncl_gt,
                           atol=0.005)

    def test_xarray_input(self):
        jday = xr.DataArray(self.jday_gt)
        lat = xr.DataArray(self.lat_gt)

        assert np.allclose(max_daylight(jday, lat), self.ncl_gt, atol=0.005)

    def test_dask_unchunked_input(self):
        jday = da.from_array(self.jday_gt)
        lat = da.from_array(self.lat_gt)

        out = self.client.submit(max_daylight, jday, lat).result()

        assert np.allclose(out, self.ncl_gt, atol=0.005)

    def test_dask_chunked_input(self):
        jday = da.from_array(self.jday_gt, chunks='auto')
        lat = da.from_array(self.lat_gt, chunks='auto')

        out = self.client.submit(max_daylight, jday, lat).result()

        assert np.allclose(out, self.ncl_gt, atol=0.005)

    def test_input_dim(self):
        self.assertRaises(ValueError, max_daylight,
                          np.arange(4).reshape(2, 2),
                          np.arange(4).reshape(2, 2))

    def test_lat_bound_warning(self):
        self.assertWarns(UserWarning, max_daylight, 10, 56)

    def test_lat_bound_second_warning(self):
        self.assertWarns(UserWarning, max_daylight, 10, 67)


class Test_psychometric_constant(unittest.TestCase):

    @classmethod
    def setUpClass(cls):

        # get ground truth from ncl run netcdf file
        try:
            ncl_xr_gt = xr.open_dataarray(
                "psychro_fao56_output.nc"
            )  # Generated by running ncl_tests/test_psychro_fao56.ncl
        except:
            ncl_xr_gt = xr.open_dataarray("test/psychro_fao56_output.nc")

        # set up ground truths
        cls.ncl_gt = np.asarray(ncl_xr_gt)

        cls.pressure_gt = np.arange(1, 101, 1)

        # make client to reference in subsequent tests
        cls.client = dd.Client()

    def test_numpy_input(self):
        assert np.allclose(psychrometric_constant(self.pressure_gt),
                           self.ncl_gt,
                           atol=0.005)

    def test_float_input(self):
        pressure = 81.78
        expected = 0.05434634
        assert np.allclose(psychrometric_constant(pressure),
                           expected,
                           atol=0.005)

    def test_list_input(self):
        assert np.allclose(psychrometric_constant(self.pressure_gt.tolist()),
                           self.ncl_gt.tolist(),
                           atol=0.005)

    def test_multi_dimensional_input(self):
        assert np.allclose(psychrometric_constant(
            self.pressure_gt.reshape(2, 50)),
                           self.ncl_gt.reshape(2, 50),
                           atol=0.005)

    def test_xarray_input(self):
        pressure = xr.DataArray(self.pressure_gt)
        expected = xr.DataArray(self.ncl_gt)

        assert np.allclose(psychrometric_constant(pressure),
                           expected,
                           atol=0.005)

    def test_dask_unchunked_input(self):
        pressure = da.from_array(self.pressure_gt)
        out = self.client.submit(psychrometric_constant, pressure).result()

        assert np.allclose(out, self.ncl_gt)

    def test_dask_chunked_input(self):
        pressure = da.from_array(self.pressure_gt, chunks='auto')
        out = self.client.submit(psychrometric_constant, pressure).result()

        assert np.allclose(out, self.ncl_gt)


class Test_saturation_vapor_pressure(unittest.TestCase):

    @classmethod
    def setUpClass(cls):

        # get ground truth from ncl run netcdf file
        try:
            ncl_xr_gt = xr.open_dataarray(
                "satvpr_temp_fao56_output.nc"
            )  # Generated by running ncl_tests/test_satvpr_temp_fao56.ncl
        except:
            ncl_xr_gt = xr.open_dataarray("test/satvpr_temp_fao56_output.nc")

        # set up ground truths
        cls.ncl_gt = np.asarray(ncl_xr_gt)

        cls.temp_gt = np.arange(1, 101, 1)

        # make client to reference in subsequent tests
        cls.client = dd.Client()

    def test_numpy_input(self):
        assert np.allclose(saturation_vapor_pressure(self.temp_gt,
                                                     tfill=1.0000000e+20),
                           self.ncl_gt,
                           atol=0.005)

    def test_float_input(self):
        degf = 59
        expected = 1.70535
        assert np.allclose(saturation_vapor_pressure(degf),
                           expected,
                           atol=0.005)

    def test_list_input(self):
        assert np.allclose(saturation_vapor_pressure(self.temp_gt.tolist(),
                                                     tfill=1.0000000e+20),
                           self.ncl_gt.tolist(),
                           atol=0.005)

    def test_multi_dimensional_input(self):
        assert np.allclose(saturation_vapor_pressure(self.temp_gt.reshape(
            2, 50),
                                                     tfill=1.0000000e+20),
                           self.ncl_gt.reshape(2, 50),
                           atol=0.005)

    def test_xarray_input(self):
        tempf = xr.DataArray(self.temp_gt)
        expected = xr.DataArray(self.ncl_gt)

        assert np.allclose(saturation_vapor_pressure(tempf,
                                                     tfill=1.0000000e+20),
                           expected,
                           atol=0.005)

    def test_dask_unchunked_input(self):
        tempf = da.from_array(self.temp_gt)
        out = self.client.submit(saturation_vapor_pressure,
                                 tempf,
                                 tfill=1.0000000e+20).result()

        assert np.allclose(out, self.ncl_gt)

    def test_dask_chunked_input(self):
        tempf = da.from_array(self.temp_gt, chunks='auto')
        out = self.client.submit(saturation_vapor_pressure,
                                 tempf,
                                 tfill=1.0000000e+20).result()

        assert np.allclose(out, self.ncl_gt)


class Test_saturation_vapor_pressure_slope(unittest.TestCase):

    @classmethod
    def setUpClass(cls):

        # get ground truth from ncl run netcdf file
        try:
            ncl_xr_gt = xr.open_dataarray(
                "satvpr_slope_fao56_output.nc"
            )  # Generated by running ncl_tests/test_satvpr_slope_fao56.ncl
        except:
            ncl_xr_gt = xr.open_dataarray("test/satvpr_slope_fao56_output.nc")

        # set up ground truths
        cls.ncl_gt = np.asarray(ncl_xr_gt)

        cls.temp_gt = np.arange(1, 101, 1)

        # make client to reference in subsequent tests
        cls.client = dd.Client()

    def test_numpy_input(self):
        assert np.allclose(saturation_vapor_pressure_slope(self.temp_gt),
                           self.ncl_gt,
                           equal_nan=True)

    def test_float_input(self):
        degf = 67.55
        expected = 0.142793
        assert np.allclose(saturation_vapor_pressure_slope(degf),
                           expected,
                           atol=0.005)

    def test_list_input(self):
        assert np.allclose(saturation_vapor_pressure_slope(
            self.temp_gt.tolist()),
                           self.ncl_gt.tolist(),
                           equal_nan=True)

    def test_multi_dimensional_input(self):
        assert np.allclose(saturation_vapor_pressure_slope(
            self.temp_gt.reshape(2, 50)),
                           self.ncl_gt.reshape(2, 50),
                           atol=0.005,
                           equal_nan=True)

    def test_xarray_input(self):
        tempf = xr.DataArray(self.temp_gt)
        expected = xr.DataArray(self.ncl_gt)

        assert np.allclose(saturation_vapor_pressure_slope(tempf),
                           expected,
                           atol=0.005,
                           equal_nan=True)

    def test_dask_unchunked_input(self):
        tempf = da.from_array(self.temp_gt)
        out = self.client.submit(saturation_vapor_pressure_slope,
                                 tempf).result()

        assert np.allclose(out, self.ncl_gt, equal_nan=True)

    def test_dask_chunked_input(self):
        tempf = da.from_array(self.temp_gt, chunks='auto')
        out = self.client.submit(saturation_vapor_pressure_slope,
                                 tempf).result()

        assert np.allclose(out, self.ncl_gt, equal_nan=True)
